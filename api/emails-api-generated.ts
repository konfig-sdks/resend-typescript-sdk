/* tslint:disable */
/* eslint-disable */
/*
Resend

Resend is the email platform for developers.

The version of the OpenAPI document: 1.1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Attachment } from '../models';
// @ts-ignore
import { CreateBatchEmailsResponse } from '../models';
// @ts-ignore
import { Email } from '../models';
// @ts-ignore
import { SendEmailRequest } from '../models';
// @ts-ignore
import { SendEmailResponse } from '../models';
// @ts-ignore
import { Tag } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EmailsApi - axios parameter creator
 * @export
 */
export const EmailsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve a single email
         * @param {string} emailId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleEmail: async (emailId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emailId' is not null or undefined
            assertParamExists('getSingleEmail', 'emailId', emailId)
            const localVarPath = `/emails/{email_id}`
                .replace(`{${"email_id"}}`, encodeURIComponent(String(emailId !== undefined ? emailId : `-email_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/emails/{email_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send an email
         * @param {SendEmailRequest} [sendEmailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmail: async (sendEmailRequest?: SendEmailRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/emails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: sendEmailRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/emails',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(sendEmailRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Trigger up to 100 batch emails at once.
         * @param {Array<SendEmailRequest>} [sendEmailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        triggerBatchEmails: async (sendEmailRequest?: Array<SendEmailRequest>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/emails/batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: sendEmailRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/emails/batch',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(sendEmailRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmailsApi - functional programming interface
 * @export
 */
export const EmailsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmailsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieve a single email
         * @param {EmailsApiGetSingleEmailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleEmail(requestParameters: EmailsApiGetSingleEmailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Email>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleEmail(requestParameters.emailId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Send an email
         * @param {EmailsApiSendEmailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendEmail(requestParameters: EmailsApiSendEmailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendEmailResponse>> {
            const sendEmailRequest: SendEmailRequest = {
                tags: requestParameters.tags,
                from: requestParameters.from,
                to: requestParameters.to,
                subject: requestParameters.subject,
                bcc: requestParameters.bcc,
                cc: requestParameters.cc,
                reply_to: requestParameters.reply_to,
                html: requestParameters.html,
                text: requestParameters.text,
                headers: requestParameters.headers,
                attachments: requestParameters.attachments
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendEmail(sendEmailRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Trigger up to 100 batch emails at once.
         * @param {EmailsApiTriggerBatchEmailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async triggerBatchEmails(requestParameters: EmailsApiTriggerBatchEmailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateBatchEmailsResponse>> {
            const sendEmailRequest: Array<SendEmailRequest> = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.triggerBatchEmails(sendEmailRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmailsApi - factory interface
 * @export
 */
export const EmailsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmailsApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieve a single email
         * @param {EmailsApiGetSingleEmailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleEmail(requestParameters: EmailsApiGetSingleEmailRequest, options?: AxiosRequestConfig): AxiosPromise<Email> {
            return localVarFp.getSingleEmail(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send an email
         * @param {EmailsApiSendEmailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmail(requestParameters: EmailsApiSendEmailRequest, options?: AxiosRequestConfig): AxiosPromise<SendEmailResponse> {
            return localVarFp.sendEmail(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Trigger up to 100 batch emails at once.
         * @param {EmailsApiTriggerBatchEmailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        triggerBatchEmails(requestParameters: EmailsApiTriggerBatchEmailsRequest, options?: AxiosRequestConfig): AxiosPromise<CreateBatchEmailsResponse> {
            return localVarFp.triggerBatchEmails(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getSingleEmail operation in EmailsApi.
 * @export
 * @interface EmailsApiGetSingleEmailRequest
 */
export type EmailsApiGetSingleEmailRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof EmailsApiGetSingleEmail
    */
    readonly emailId: string
    
}

/**
 * Request parameters for sendEmail operation in EmailsApi.
 * @export
 * @interface EmailsApiSendEmailRequest
 */
export type EmailsApiSendEmailRequest = {
    
} & SendEmailRequest

/**
 * Request parameters for triggerBatchEmails operation in EmailsApi.
 * @export
 * @interface EmailsApiTriggerBatchEmailsRequest
 */
export type EmailsApiTriggerBatchEmailsRequest = Array<SendEmailRequest>

/**
 * EmailsApiGenerated - object-oriented interface
 * @export
 * @class EmailsApiGenerated
 * @extends {BaseAPI}
 */
export class EmailsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Retrieve a single email
     * @param {EmailsApiGetSingleEmailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailsApiGenerated
     */
    public getSingleEmail(requestParameters: EmailsApiGetSingleEmailRequest, options?: AxiosRequestConfig) {
        return EmailsApiFp(this.configuration).getSingleEmail(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send an email
     * @param {EmailsApiSendEmailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailsApiGenerated
     */
    public sendEmail(requestParameters: EmailsApiSendEmailRequest, options?: AxiosRequestConfig) {
        return EmailsApiFp(this.configuration).sendEmail(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Trigger up to 100 batch emails at once.
     * @param {EmailsApiTriggerBatchEmailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailsApiGenerated
     */
    public triggerBatchEmails(requestParameters: EmailsApiTriggerBatchEmailsRequest, options?: AxiosRequestConfig) {
        return EmailsApiFp(this.configuration).triggerBatchEmails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
