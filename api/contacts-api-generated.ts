/* tslint:disable */
/* eslint-disable */
/*
Resend

Resend is the email platform for developers.

The version of the OpenAPI document: 1.1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateContactOptions } from '../models';
// @ts-ignore
import { CreateContactResponseSuccess } from '../models';
// @ts-ignore
import { GetContactResponseSuccess } from '../models';
// @ts-ignore
import { ListContactsResponseSuccess } from '../models';
// @ts-ignore
import { RemoveContactResponseSuccess } from '../models';
// @ts-ignore
import { UpdateContactOptions } from '../models';
// @ts-ignore
import { UpdateContactResponseSuccess } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ContactsApi - axios parameter creator
 * @export
 */
export const ContactsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new contact
         * @param {string} audienceId 
         * @param {CreateContactOptions} [createContactOptions] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewContact: async (audienceId: string, createContactOptions?: CreateContactOptions, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'audienceId' is not null or undefined
            assertParamExists('createNewContact', 'audienceId', audienceId)
            const localVarPath = `/audiences/{audience_id}/contacts`
                .replace(`{${"audience_id"}}`, encodeURIComponent(String(audienceId !== undefined ? audienceId : `-audience_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createContactOptions,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/audiences/{audience_id}/contacts',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createContactOptions, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a list of contacts
         * @param {string} audienceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList: async (audienceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'audienceId' is not null or undefined
            assertParamExists('getList', 'audienceId', audienceId)
            const localVarPath = `/audiences/{audience_id}/contacts`
                .replace(`{${"audience_id"}}`, encodeURIComponent(String(audienceId !== undefined ? audienceId : `-audience_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/audiences/{audience_id}/contacts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a single contact
         * @param {string} id 
         * @param {string} audienceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle: async (id: string, audienceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSingle', 'id', id)
            // verify required parameter 'audienceId' is not null or undefined
            assertParamExists('getSingle', 'audienceId', audienceId)
            const localVarPath = `/audiences/{audience_id}/contacts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"audience_id"}}`, encodeURIComponent(String(audienceId !== undefined ? audienceId : `-audience_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/audiences/{audience_id}/contacts/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove an existing contact by email
         * @param {string} email 
         * @param {string} audienceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeByEmail: async (email: string, audienceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('removeByEmail', 'email', email)
            // verify required parameter 'audienceId' is not null or undefined
            assertParamExists('removeByEmail', 'audienceId', audienceId)
            const localVarPath = `/audiences/{audience_id}/contacts/{email}`
                .replace(`{${"email"}}`, encodeURIComponent(String(email !== undefined ? email : `-email-`)))
                .replace(`{${"audience_id"}}`, encodeURIComponent(String(audienceId !== undefined ? audienceId : `-audience_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/audiences/{audience_id}/contacts/{email}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove an existing contact by id
         * @param {string} id 
         * @param {string} audienceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeById: async (id: string, audienceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('removeById', 'id', id)
            // verify required parameter 'audienceId' is not null or undefined
            assertParamExists('removeById', 'audienceId', audienceId)
            const localVarPath = `/audiences/{audience_id}/contacts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"audience_id"}}`, encodeURIComponent(String(audienceId !== undefined ? audienceId : `-audience_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/audiences/{audience_id}/contacts/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a single contact
         * @param {string} id 
         * @param {string} audienceId 
         * @param {UpdateContactOptions} [updateContactOptions] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSingleContact: async (id: string, audienceId: string, updateContactOptions?: UpdateContactOptions, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateSingleContact', 'id', id)
            // verify required parameter 'audienceId' is not null or undefined
            assertParamExists('updateSingleContact', 'audienceId', audienceId)
            const localVarPath = `/audiences/{audience_id}/contacts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"audience_id"}}`, encodeURIComponent(String(audienceId !== undefined ? audienceId : `-audience_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateContactOptions,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/audiences/{audience_id}/contacts/{id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateContactOptions, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContactsApi - functional programming interface
 * @export
 */
export const ContactsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContactsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new contact
         * @param {ContactsApiCreateNewContactRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewContact(requestParameters: ContactsApiCreateNewContactRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateContactResponseSuccess>> {
            const createContactOptions: CreateContactOptions = {
                email: requestParameters.requestBody.email,
                first_name: requestParameters.requestBody.first_name,
                last_name: requestParameters.requestBody.last_name,
                unsubscribed: requestParameters.requestBody.unsubscribed,
                audience_id: requestParameters.requestBody.audience_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewContact(requestParameters.audienceId, createContactOptions, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve a list of contacts
         * @param {ContactsApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList(requestParameters: ContactsApiGetListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListContactsResponseSuccess>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList(requestParameters.audienceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve a single contact
         * @param {ContactsApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingle(requestParameters: ContactsApiGetSingleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetContactResponseSuccess>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingle(requestParameters.id, requestParameters.audienceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Remove an existing contact by email
         * @param {ContactsApiRemoveByEmailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeByEmail(requestParameters: ContactsApiRemoveByEmailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RemoveContactResponseSuccess>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeByEmail(requestParameters.email, requestParameters.audienceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Remove an existing contact by id
         * @param {ContactsApiRemoveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeById(requestParameters: ContactsApiRemoveByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RemoveContactResponseSuccess>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeById(requestParameters.id, requestParameters.audienceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a single contact
         * @param {ContactsApiUpdateSingleContactRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSingleContact(requestParameters: ContactsApiUpdateSingleContactRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateContactResponseSuccess>> {
            const updateContactOptions: UpdateContactOptions = {
                email: requestParameters.email,
                first_name: requestParameters.first_name,
                last_name: requestParameters.last_name,
                unsubscribed: requestParameters.unsubscribed
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSingleContact(requestParameters.id, requestParameters.audienceId, updateContactOptions, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ContactsApi - factory interface
 * @export
 */
export const ContactsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContactsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new contact
         * @param {ContactsApiCreateNewContactRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewContact(requestParameters: ContactsApiCreateNewContactRequest, options?: AxiosRequestConfig): AxiosPromise<CreateContactResponseSuccess> {
            return localVarFp.createNewContact(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a list of contacts
         * @param {ContactsApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(requestParameters: ContactsApiGetListRequest, options?: AxiosRequestConfig): AxiosPromise<ListContactsResponseSuccess> {
            return localVarFp.getList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a single contact
         * @param {ContactsApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle(requestParameters: ContactsApiGetSingleRequest, options?: AxiosRequestConfig): AxiosPromise<GetContactResponseSuccess> {
            return localVarFp.getSingle(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove an existing contact by email
         * @param {ContactsApiRemoveByEmailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeByEmail(requestParameters: ContactsApiRemoveByEmailRequest, options?: AxiosRequestConfig): AxiosPromise<RemoveContactResponseSuccess> {
            return localVarFp.removeByEmail(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove an existing contact by id
         * @param {ContactsApiRemoveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeById(requestParameters: ContactsApiRemoveByIdRequest, options?: AxiosRequestConfig): AxiosPromise<RemoveContactResponseSuccess> {
            return localVarFp.removeById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a single contact
         * @param {ContactsApiUpdateSingleContactRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSingleContact(requestParameters: ContactsApiUpdateSingleContactRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateContactResponseSuccess> {
            return localVarFp.updateSingleContact(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewContact operation in ContactsApi.
 * @export
 * @interface ContactsApiCreateNewContactRequest
 */
export type ContactsApiCreateNewContactRequest = {
    /**
    * 
    * @type {string}
    * @memberof ContactsApiCreateNewContact
    */
    readonly audienceId: string
    /**
    * 
    * @type {CreateContactOptions}
    * @memberof ContactsApiCreateNewContact
    */
    readonly requestBody?: CreateContactOptions
}

/**
 * Request parameters for getList operation in ContactsApi.
 * @export
 * @interface ContactsApiGetListRequest
 */
export type ContactsApiGetListRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ContactsApiGetList
    */
    readonly audienceId: string
    
}

/**
 * Request parameters for getSingle operation in ContactsApi.
 * @export
 * @interface ContactsApiGetSingleRequest
 */
export type ContactsApiGetSingleRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ContactsApiGetSingle
    */
    readonly id: string
    
    /**
    * 
    * @type {string}
    * @memberof ContactsApiGetSingle
    */
    readonly audienceId: string
    
}

/**
 * Request parameters for removeByEmail operation in ContactsApi.
 * @export
 * @interface ContactsApiRemoveByEmailRequest
 */
export type ContactsApiRemoveByEmailRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ContactsApiRemoveByEmail
    */
    readonly email: string
    
    /**
    * 
    * @type {string}
    * @memberof ContactsApiRemoveByEmail
    */
    readonly audienceId: string
    
}

/**
 * Request parameters for removeById operation in ContactsApi.
 * @export
 * @interface ContactsApiRemoveByIdRequest
 */
export type ContactsApiRemoveByIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ContactsApiRemoveById
    */
    readonly id: string
    
    /**
    * 
    * @type {string}
    * @memberof ContactsApiRemoveById
    */
    readonly audienceId: string
    
}

/**
 * Request parameters for updateSingleContact operation in ContactsApi.
 * @export
 * @interface ContactsApiUpdateSingleContactRequest
 */
export type ContactsApiUpdateSingleContactRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ContactsApiUpdateSingleContact
    */
    readonly id: string
    
    /**
    * 
    * @type {string}
    * @memberof ContactsApiUpdateSingleContact
    */
    readonly audienceId: string
    
} & UpdateContactOptions

/**
 * ContactsApiGenerated - object-oriented interface
 * @export
 * @class ContactsApiGenerated
 * @extends {BaseAPI}
 */
export class ContactsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create a new contact
     * @param {ContactsApiCreateNewContactRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApiGenerated
     */
    public createNewContact(requestParameters: ContactsApiCreateNewContactRequest, options?: AxiosRequestConfig) {
        return ContactsApiFp(this.configuration).createNewContact(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve a list of contacts
     * @param {ContactsApiGetListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApiGenerated
     */
    public getList(requestParameters: ContactsApiGetListRequest, options?: AxiosRequestConfig) {
        return ContactsApiFp(this.configuration).getList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve a single contact
     * @param {ContactsApiGetSingleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApiGenerated
     */
    public getSingle(requestParameters: ContactsApiGetSingleRequest, options?: AxiosRequestConfig) {
        return ContactsApiFp(this.configuration).getSingle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove an existing contact by email
     * @param {ContactsApiRemoveByEmailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApiGenerated
     */
    public removeByEmail(requestParameters: ContactsApiRemoveByEmailRequest, options?: AxiosRequestConfig) {
        return ContactsApiFp(this.configuration).removeByEmail(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove an existing contact by id
     * @param {ContactsApiRemoveByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApiGenerated
     */
    public removeById(requestParameters: ContactsApiRemoveByIdRequest, options?: AxiosRequestConfig) {
        return ContactsApiFp(this.configuration).removeById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a single contact
     * @param {ContactsApiUpdateSingleContactRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApiGenerated
     */
    public updateSingleContact(requestParameters: ContactsApiUpdateSingleContactRequest, options?: AxiosRequestConfig) {
        return ContactsApiFp(this.configuration).updateSingleContact(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
