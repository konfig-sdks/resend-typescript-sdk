/* tslint:disable */
/* eslint-disable */
/*
Resend

Resend is the email platform for developers.

The version of the OpenAPI document: 1.1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateDomainRequest } from '../models';
// @ts-ignore
import { CreateDomainResponse } from '../models';
// @ts-ignore
import { DeleteDomainResponse } from '../models';
// @ts-ignore
import { Domain } from '../models';
// @ts-ignore
import { ListDomainsResponse } from '../models';
// @ts-ignore
import { UpdateDomainOptions } from '../models';
// @ts-ignore
import { UpdateDomainResponseSuccess } from '../models';
// @ts-ignore
import { VerifyDomainResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * DomainsApi - axios parameter creator
 * @export
 */
export const DomainsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new domain
         * @param {CreateDomainRequest} [createDomainRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewDomain: async (createDomainRequest?: CreateDomainRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/domains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createDomainRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/domains',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createDomainRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a list of domains
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/domains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/domains',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a single domain
         * @param {string} domainId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleDomain: async (domainId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'domainId' is not null or undefined
            assertParamExists('getSingleDomain', 'domainId', domainId)
            const localVarPath = `/domains/{domain_id}`
                .replace(`{${"domain_id"}}`, encodeURIComponent(String(domainId !== undefined ? domainId : `-domain_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/domains/{domain_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove an existing domain
         * @param {string} domainId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeDomain: async (domainId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'domainId' is not null or undefined
            assertParamExists('removeDomain', 'domainId', domainId)
            const localVarPath = `/domains/{domain_id}`
                .replace(`{${"domain_id"}}`, encodeURIComponent(String(domainId !== undefined ? domainId : `-domain_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/domains/{domain_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing domain
         * @param {string} domainId 
         * @param {UpdateDomainOptions} [updateDomainOptions] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExistingDomain: async (domainId: string, updateDomainOptions?: UpdateDomainOptions, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'domainId' is not null or undefined
            assertParamExists('updateExistingDomain', 'domainId', domainId)
            const localVarPath = `/domains/{domain_id}`
                .replace(`{${"domain_id"}}`, encodeURIComponent(String(domainId !== undefined ? domainId : `-domain_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateDomainOptions,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/domains/{domain_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateDomainOptions, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Verify an existing domain
         * @param {string} domainId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyDomain: async (domainId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'domainId' is not null or undefined
            assertParamExists('verifyDomain', 'domainId', domainId)
            const localVarPath = `/domains/{domain_id}/verify`
                .replace(`{${"domain_id"}}`, encodeURIComponent(String(domainId !== undefined ? domainId : `-domain_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/domains/{domain_id}/verify',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DomainsApi - functional programming interface
 * @export
 */
export const DomainsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DomainsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new domain
         * @param {DomainsApiCreateNewDomainRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewDomain(requestParameters: DomainsApiCreateNewDomainRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateDomainResponse>> {
            const createDomainRequest: CreateDomainRequest = {
                name: requestParameters.name,
                region: requestParameters.region
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewDomain(createDomainRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve a list of domains
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListDomainsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve a single domain
         * @param {DomainsApiGetSingleDomainRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleDomain(requestParameters: DomainsApiGetSingleDomainRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Domain>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleDomain(requestParameters.domainId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Remove an existing domain
         * @param {DomainsApiRemoveDomainRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeDomain(requestParameters: DomainsApiRemoveDomainRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteDomainResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeDomain(requestParameters.domainId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing domain
         * @param {DomainsApiUpdateExistingDomainRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateExistingDomain(requestParameters: DomainsApiUpdateExistingDomainRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateDomainResponseSuccess>> {
            const updateDomainOptions: UpdateDomainOptions = {
                click_tracking: requestParameters.click_tracking,
                open_tracking: requestParameters.open_tracking
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateExistingDomain(requestParameters.domainId, updateDomainOptions, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Verify an existing domain
         * @param {DomainsApiVerifyDomainRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyDomain(requestParameters: DomainsApiVerifyDomainRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerifyDomainResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyDomain(requestParameters.domainId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DomainsApi - factory interface
 * @export
 */
export const DomainsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DomainsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new domain
         * @param {DomainsApiCreateNewDomainRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewDomain(requestParameters: DomainsApiCreateNewDomainRequest, options?: AxiosRequestConfig): AxiosPromise<CreateDomainResponse> {
            return localVarFp.createNewDomain(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a list of domains
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(options?: AxiosRequestConfig): AxiosPromise<ListDomainsResponse> {
            return localVarFp.getList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a single domain
         * @param {DomainsApiGetSingleDomainRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleDomain(requestParameters: DomainsApiGetSingleDomainRequest, options?: AxiosRequestConfig): AxiosPromise<Domain> {
            return localVarFp.getSingleDomain(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove an existing domain
         * @param {DomainsApiRemoveDomainRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeDomain(requestParameters: DomainsApiRemoveDomainRequest, options?: AxiosRequestConfig): AxiosPromise<DeleteDomainResponse> {
            return localVarFp.removeDomain(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing domain
         * @param {DomainsApiUpdateExistingDomainRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExistingDomain(requestParameters: DomainsApiUpdateExistingDomainRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateDomainResponseSuccess> {
            return localVarFp.updateExistingDomain(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Verify an existing domain
         * @param {DomainsApiVerifyDomainRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyDomain(requestParameters: DomainsApiVerifyDomainRequest, options?: AxiosRequestConfig): AxiosPromise<VerifyDomainResponse> {
            return localVarFp.verifyDomain(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewDomain operation in DomainsApi.
 * @export
 * @interface DomainsApiCreateNewDomainRequest
 */
export type DomainsApiCreateNewDomainRequest = {
    
} & CreateDomainRequest

/**
 * Request parameters for getSingleDomain operation in DomainsApi.
 * @export
 * @interface DomainsApiGetSingleDomainRequest
 */
export type DomainsApiGetSingleDomainRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof DomainsApiGetSingleDomain
    */
    readonly domainId: string
    
}

/**
 * Request parameters for removeDomain operation in DomainsApi.
 * @export
 * @interface DomainsApiRemoveDomainRequest
 */
export type DomainsApiRemoveDomainRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof DomainsApiRemoveDomain
    */
    readonly domainId: string
    
}

/**
 * Request parameters for updateExistingDomain operation in DomainsApi.
 * @export
 * @interface DomainsApiUpdateExistingDomainRequest
 */
export type DomainsApiUpdateExistingDomainRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof DomainsApiUpdateExistingDomain
    */
    readonly domainId: string
    
} & UpdateDomainOptions

/**
 * Request parameters for verifyDomain operation in DomainsApi.
 * @export
 * @interface DomainsApiVerifyDomainRequest
 */
export type DomainsApiVerifyDomainRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof DomainsApiVerifyDomain
    */
    readonly domainId: string
    
}

/**
 * DomainsApiGenerated - object-oriented interface
 * @export
 * @class DomainsApiGenerated
 * @extends {BaseAPI}
 */
export class DomainsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create a new domain
     * @param {DomainsApiCreateNewDomainRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApiGenerated
     */
    public createNewDomain(requestParameters: DomainsApiCreateNewDomainRequest, options?: AxiosRequestConfig) {
        return DomainsApiFp(this.configuration).createNewDomain(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve a list of domains
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApiGenerated
     */
    public getList(options?: AxiosRequestConfig) {
        return DomainsApiFp(this.configuration).getList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve a single domain
     * @param {DomainsApiGetSingleDomainRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApiGenerated
     */
    public getSingleDomain(requestParameters: DomainsApiGetSingleDomainRequest, options?: AxiosRequestConfig) {
        return DomainsApiFp(this.configuration).getSingleDomain(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove an existing domain
     * @param {DomainsApiRemoveDomainRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApiGenerated
     */
    public removeDomain(requestParameters: DomainsApiRemoveDomainRequest, options?: AxiosRequestConfig) {
        return DomainsApiFp(this.configuration).removeDomain(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing domain
     * @param {DomainsApiUpdateExistingDomainRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApiGenerated
     */
    public updateExistingDomain(requestParameters: DomainsApiUpdateExistingDomainRequest, options?: AxiosRequestConfig) {
        return DomainsApiFp(this.configuration).updateExistingDomain(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Verify an existing domain
     * @param {DomainsApiVerifyDomainRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApiGenerated
     */
    public verifyDomain(requestParameters: DomainsApiVerifyDomainRequest, options?: AxiosRequestConfig) {
        return DomainsApiFp(this.configuration).verifyDomain(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
