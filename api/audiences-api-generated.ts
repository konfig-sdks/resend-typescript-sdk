/* tslint:disable */
/* eslint-disable */
/*
Resend

Resend is the email platform for developers.

The version of the OpenAPI document: 1.1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateAudienceOptions } from '../models';
// @ts-ignore
import { CreateAudienceResponseSuccess } from '../models';
// @ts-ignore
import { GetAudienceResponseSuccess } from '../models';
// @ts-ignore
import { ListAudiencesResponseSuccess } from '../models';
// @ts-ignore
import { RemoveAudienceResponseSuccess } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AudiencesApi - axios parameter creator
 * @export
 */
export const AudiencesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a list of contacts
         * @param {CreateAudienceOptions} [createAudienceOptions] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createContactList: async (createAudienceOptions?: CreateAudienceOptions, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/audiences`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createAudienceOptions,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/audiences',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createAudienceOptions, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a list of audiences
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/audiences`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/audiences',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a single audience
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleAudience: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSingleAudience', 'id', id)
            const localVarPath = `/audiences/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/audiences/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove an existing audience
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeExistingAudience: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('removeExistingAudience', 'id', id)
            const localVarPath = `/audiences/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/audiences/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AudiencesApi - functional programming interface
 * @export
 */
export const AudiencesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AudiencesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a list of contacts
         * @param {AudiencesApiCreateContactListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createContactList(requestParameters: AudiencesApiCreateContactListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateAudienceResponseSuccess>> {
            const createAudienceOptions: CreateAudienceOptions = {
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createContactList(createAudienceOptions, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve a list of audiences
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListAudiencesResponseSuccess>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve a single audience
         * @param {AudiencesApiGetSingleAudienceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleAudience(requestParameters: AudiencesApiGetSingleAudienceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAudienceResponseSuccess>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleAudience(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Remove an existing audience
         * @param {AudiencesApiRemoveExistingAudienceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeExistingAudience(requestParameters: AudiencesApiRemoveExistingAudienceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RemoveAudienceResponseSuccess>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeExistingAudience(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AudiencesApi - factory interface
 * @export
 */
export const AudiencesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AudiencesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a list of contacts
         * @param {AudiencesApiCreateContactListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createContactList(requestParameters: AudiencesApiCreateContactListRequest, options?: AxiosRequestConfig): AxiosPromise<CreateAudienceResponseSuccess> {
            return localVarFp.createContactList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a list of audiences
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(options?: AxiosRequestConfig): AxiosPromise<ListAudiencesResponseSuccess> {
            return localVarFp.getList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a single audience
         * @param {AudiencesApiGetSingleAudienceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleAudience(requestParameters: AudiencesApiGetSingleAudienceRequest, options?: AxiosRequestConfig): AxiosPromise<GetAudienceResponseSuccess> {
            return localVarFp.getSingleAudience(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove an existing audience
         * @param {AudiencesApiRemoveExistingAudienceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeExistingAudience(requestParameters: AudiencesApiRemoveExistingAudienceRequest, options?: AxiosRequestConfig): AxiosPromise<RemoveAudienceResponseSuccess> {
            return localVarFp.removeExistingAudience(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createContactList operation in AudiencesApi.
 * @export
 * @interface AudiencesApiCreateContactListRequest
 */
export type AudiencesApiCreateContactListRequest = {
    
} & CreateAudienceOptions

/**
 * Request parameters for getSingleAudience operation in AudiencesApi.
 * @export
 * @interface AudiencesApiGetSingleAudienceRequest
 */
export type AudiencesApiGetSingleAudienceRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof AudiencesApiGetSingleAudience
    */
    readonly id: string
    
}

/**
 * Request parameters for removeExistingAudience operation in AudiencesApi.
 * @export
 * @interface AudiencesApiRemoveExistingAudienceRequest
 */
export type AudiencesApiRemoveExistingAudienceRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof AudiencesApiRemoveExistingAudience
    */
    readonly id: string
    
}

/**
 * AudiencesApiGenerated - object-oriented interface
 * @export
 * @class AudiencesApiGenerated
 * @extends {BaseAPI}
 */
export class AudiencesApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create a list of contacts
     * @param {AudiencesApiCreateContactListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AudiencesApiGenerated
     */
    public createContactList(requestParameters: AudiencesApiCreateContactListRequest, options?: AxiosRequestConfig) {
        return AudiencesApiFp(this.configuration).createContactList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve a list of audiences
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AudiencesApiGenerated
     */
    public getList(options?: AxiosRequestConfig) {
        return AudiencesApiFp(this.configuration).getList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve a single audience
     * @param {AudiencesApiGetSingleAudienceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AudiencesApiGenerated
     */
    public getSingleAudience(requestParameters: AudiencesApiGetSingleAudienceRequest, options?: AxiosRequestConfig) {
        return AudiencesApiFp(this.configuration).getSingleAudience(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove an existing audience
     * @param {AudiencesApiRemoveExistingAudienceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AudiencesApiGenerated
     */
    public removeExistingAudience(requestParameters: AudiencesApiRemoveExistingAudienceRequest, options?: AxiosRequestConfig) {
        return AudiencesApiFp(this.configuration).removeExistingAudience(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
